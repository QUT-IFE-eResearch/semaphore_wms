var fs = require('fs');
var path = require('path');
var ejs = require('ejs');

/** Check if a given filepath is absolute or relative */
exports.isAbsolute = function isAbsolute(filepath) {
  if ('/' == filepath[0]) return true;
  if (':' == filepath[1] && '\\' == path[2]) return true;
  return false;
};

exports.isDir = function isDir(pathToDir) {
  try { 
    return fs.statSync(pathToDir).isDirectory();
  } catch (err) { 
    return false;
  }
}

exports.eachEntryInDir = function eachEntryInDir(dirpath, onVisit) {
  var files = fs.readdirSync(dirpath);
  files.forEach(function(basename){
    var fullpath = path.join(dirpath, basename);
    onVisit(basename, fullpath);
  });
}

exports.eachDirInDir = function eachDirInDir(dirpath, onVisit) {
  return exports.eachEntryInDir(dirpath, function(basename, fullpath) {
    if (fs.statSync(fullpath).isDirectory()) onVisit(basename, fullpath);
  });
}

exports.eachFileInDir = function eachFileInDir(dirpath, onVisit, recursive) {
  return exports.eachEntryInDir(dirpath, function(basename, fullpath) {
    if (fs.statSync(fullpath).isDirectory()) {
      if (recursive) eachFileInDir(fullpath, onVisit, recursive);
    } else {
      onVisit(basename, fullpath);
    }
  });
}

exports.loadCompiledView = function(filepath) {
  return ejs.compile(fs.readFileSync(filepath, 'utf8'));
}

/// Add all properties in source to target. Existing property will be replaced.
exports.merge = function merge(target, source) {
  Object.keys(source).forEach(function(key) {
    var val = source[key];
    if (typeof val === 'object' && Object.getPrototypeOf(val) === Object.prototype) {
      var tval = target[key];
      if (typeof tval !== 'object' || Object.getPrototypeOf(tval) !== Object.prototype) {
        tval = target[key] = {};
      }
      merge(tval, val);
    } else {
      target[key] = val;
    }
  });
  return target;
}

exports.urlJoin = function() {
  var url = '';
  for (var i=0; i<arguments.length; ++i) {
    var part = arguments[i];
    if (part) {
      if (url.length > 0) {
        if (url[url.length-1] === '/' && part[0] === '/') part = part.slice(1);
        if (url[url.length-1] !== '/' && part[0] !== '/') url += '/';
      }
      url += part;
    }
  }
  return url;
};

exports.forEachSerial = function(arr, onEachItem, onFinish) {
  var stack = [];
  for (var i=arr.length; i--; ) stack.push(arr[i]);
  function next(err) {
    if (err) return onFinish(err);
    var item = stack.pop();
    if (item) process.nextTick( function() { onEachItem(item, next); } );
    else process.nextTick(onFinish);
  }
  process.nextTick(next);
}
