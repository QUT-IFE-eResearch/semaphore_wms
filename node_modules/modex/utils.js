var fs = require('fs');
var path = require('path');
var ejs = require('ejs');

/** Check if a given filepath is absolute or relative */
exports.isAbsolute = function isAbsolute(filepath) {
  if ('/' == filepath[0]) return true;
  if (':' == filepath[1] && '\\' == path[2]) return true;
  return false;
};

exports.eachEntryInDir = function eachEntryInDir(dirpath, onVisit) {
  var files = fs.readdirSync(dirpath);
  files.forEach(function(basename){
    var fullpath = path.join(dirpath, basename);
    onVisit(basename, fullpath);
  });
}

exports.eachDirInDir = function eachDirInDir(dirpath, onVisit) {
  return exports.eachEntryInDir(dirpath, function(basename, fullpath) {
    if (fs.statSync(fullpath).isDirectory()) onVisit(basename, fullpath);
  });
}

exports.eachFileInDir = function eachFileInDir(dirpath, onVisit, recursive) {
  return exports.eachEntryInDir(dirpath, function(basename, fullpath) {
    if (fs.statSync(fullpath).isDirectory()) {
      if (recursive) eachFileInDir(fullpath, onVisit, recursive);
    } else {
      onVisit(basename, fullpath);
    }
  });
}

exports.loadCompiledView = function(filepath) {
  return ejs.compile(fs.readFileSync(filepath, 'utf8'));
}

/// Add all properties in source to target. Existing property will be replaced.
exports.merge = function(target, source) {
  var key, val, tval;
  for (key in source) {
    val = source[key];
    if (typeof val === 'object' && Object.getPrototypeOf(val) === Object.prototype) {
      tval = target[key];
      if (typeof tval !== 'object' || Object.getPrototypeOf(tval) !== Object.prototype) {
        tval = target[key] = {};
      }
      extend(tval, val);
    } else {
      target[key] = val;
    }
  }
  return target;
}