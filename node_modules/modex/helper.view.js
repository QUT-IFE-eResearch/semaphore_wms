"use strict";

var helper = module.exports = function(entity) {
  this.partials = {};
  this._scripts = [];
  this._styles = [];
  this.view = '';
  this.entity = entity;
  this.url = {};
  this.url.action = function(name, params) {
    return helper.url.action(entity, name, params);
  };
  this.url.module = function() {
    return helper.url.module(entity);
  };
};

helper.partials = {};
helper.entity = {};
helper.view = '';

helper.partial = function(name, options) {
  return findPartial(helper.partials, name, options) || '';
};

helper.prototype.partial = function(name, options) {
  return findPartial(this.partials, name, options) || helper.partial(name, options) || '';
};

function findPartial(container, name, options) {
  var p = container[name];
  if (p == null) return;
  else if (typeof p === 'string') return p;
  else if (typeof p === 'function') return p(options);
  else return container[name].toString();
}

helper.setPartial = helper.prototype.setPartial = function(name, value) {
  this.partials[name] = value;
};

/**
fields, record, context
context: action 
  controller.action
*/
helper.form = helper.prototype.form = function(fields, record, context) {
  context = context || '';
  var p = helper.partials['form.'+context];
  return p({fields:fields, record:record, context:context, _:helper});
};

helper.setForm = function(context, value) {
  helper.partials['form.'+context] = value;
};

helper.field = helper.prototype.field = function(field, value, context) {
//  if (!value) return '';
  context = context || {};
  var moduleNamespace = context.module || this.entity.owner || '';
  var view = context.view || this.view || '';
  var key1 = 'field.' + moduleNamespace + '.' + view + '.name:' + field.name;
  var key2 = 'field.' + '.' + view + '.name:' + field.name;
  var key3 = 'field.' + moduleNamespace + '.' + view + '.type:' + field.type;
  var key4 = 'field.' + '.' + view + '.type:' + field.type;
  var renderField = helper.partials[key1] || helper.partials[key2] || helper.partials[key3] || helper.partials[key4];
  var label = helper.partial('_fieldLabel', {id:'form_'+field.name, label:helper.label(field.name)});
  return label + renderField({field: field, value: value, context: {module:moduleNamespace, view:view}});
};

helper.setField = function(context, value) {
  var moduleNamespace = context.module || '';
  var key = '';
  if (context.name) key = 'name:'+context.name;
  else if (context.type) key = 'type:'+context.type;
  var view = context.view || '';
  var fullkey = 'field.' + moduleNamespace + '.' + view + '.' + key;
  helper.partials[fullkey] = value;
};

var labels = {
  'global': {
  },
  'model.field': {
  }
};

var labeler = helper.labeler = helper.prototype.labeler = {};
labeler.get = helper.label = helper.prototype.label = function(name, context) {
  context = context || 'global';
  if (!((context in labels) && (name in labels[context]))) return (name[0].toUpperCase() + name.slice(1));
};

function TableHeadCell(table, level, name) {
  Object.defineProperties(this, {
    _table : { value:table },
    name : { value:name },
    _level : { value:level },
    _colspan : { value:1, writable:true }
  });
}

Object.defineProperties(TableHeadCell.prototype, {
  rowspan : { get:function(){return this._table.headMaxRowspan - this._level;}, enumerable:true },
  colspan : { get:function(){return this._colspan;}, enumerable:true },
  text : { get:function(){return labeler.get(this.name, 'field.list');}, enumerable:true }
});

function addUnique(table, depth, name, parentName) {
  var headRow = table.headRows[depth];
  if (!headRow) headRow = table.headRows[depth] = [];
  var i;
  if (headRow.length > 0 && headRow[headRow.length-1].name === name) {
    headRow[i]._colspan++;
    return i;
  }
  i = headRow.length;
  headRow.push(new TableHeadCell(table, depth, name));
  return i;
}

helper.table = helper.prototype.table = function(data) {
  var self = this;
  var table = {
    headMaxRowspan: 0,
    headRows:[],
    bodyRows: {
      forEach: function(onEachRow) {
        data.records.forEach(function(record){
          onEachRow({
            id: record.id,
            forEach: function(onEachCell) {
              data.fields.forEach(function(f){
                onEachCell(self.field(f, record[f.name]));
              });
            }
          });
        });
      }
    }
  };
  var nextRow = [];
  var depth = 0;
  data.fields.forEach(function(field) { nextRow.push(['', field.name]); });
  function onEachField(pTokens) {
    var parentName = pTokens[0];
    var name = pTokens[1];
    var tokens = splitAtFirstToken(name);
    if (tokens) {
      name = tokens[0];
      nextRow.push(tokens);
    }
    addUnique(table, depth, name, parentName);
  }  
  while (nextRow.length > 0) {
    var row = nextRow;
    nextRow = [];
    row.forEach(onEachField);
    ++depth;
  }
  table.headMaxRowspan = depth;
  return table;
};

function splitAtFirstToken(str, token) {
  var tokenPos = str.indexOf(token);
  if (tokenPos > 0 && tokenPos < str.length - 1) {
    return [str.slice(0, tokenPos), str.slice(tokenPos+1)];
  }
}

helper.url = {};
helper.url.action = function(entity, name, params) {
  var dict = entity.parent._namedRoutes;
  var dict2 = entity.owner._namedRoutes;
  var owner = entity.owner.namespace + '.';
  var controller = entity.controllerName ? entity.controllerName + '.' : '';
  console.log(entity);
  console.log(dict);
  console.log(dict2);
  console.log(owner);
  console.log(controller);
  var urlstr = dict[name] || dict[owner+name] || dict[owner+controller+name] || dict2[name] || dict2[owner+name] || dict2[owner+controller+name] || '';
  if (typeof params !== 'undefined') {
    var i = 0;
    if (!Array.isArray(params)) params = [params];
    urlstr = urlstr.replace(/:\w+/g,function(){ return params[i++]; });
  }
  //console.log(dict);
  //console.log(owner);
  //console.log(name);
  //console.log(params);
  return urlstr;
};

helper.url.module = function(entity) {
  return entity.owner.routePath;
}

helper.prototype.script = function(values) {
  var s = this._scripts;
  if (!Array.isArray(values)) values = [values];
  s.push.apply(s, values);
}

helper.prototype.scripts = function() {
  var str = '';
  this._scripts.forEach(function(val){
    str += '<script type="text/javascript" src="' + val + '"></script>\n';
  });
  return str;
}

helper.prototype.style = function(values) {
  var s = this._styles;
  if (!Array.isArray(values)) values = [values];
  s.push.apply(s, values);
}

helper.prototype.styles = function() {
  var str = '';
  this._styles.forEach(function(val){
    str += '<link rel="stylesheet" type="text/css" href="' + val + '" media="all"/>\n';
  });
  return str;
}

var Field = require('./helper.model').Field;
Field.prototype.render = function(initialValue, isDisabled) {
};
/*
Field.prototype.format = function(value, options) {
  if (!value) return '';
  var cb;
  if (options) {
    if (typeof options[this.type] === 'function') cb = options[this.type];
    else if (typeof options['default'] === 'function') cb = options['default'];
  }
  var ret = fieldFormatter[this.type](value, this);
  if (cb) cb(ret);
  else return ret;
};
*/
