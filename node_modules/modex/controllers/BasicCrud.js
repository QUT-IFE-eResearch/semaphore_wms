"use strict";
/**
 * Default actions:
 *  - GET : list  show  new  edit  confirmDelete
 *  - POST: create, modify
 *  - PUT : update, multiUpdate
 *  - DELETE : delete  multiDelete
 * Options:
 *   name : String : Name of the controller (Optional)
 *   model : Object - A moongose model or any other types of model that provide compatible interface. (Required)
 *   actions : String - Specify default handlers. Use '-' prefix to specify exclusion list.
 *     Eg: 'list show' will only include list and show. '- new delete' will exclude both new and delete. Default will include all default handlers. (Optional)
 *   defaultFormat: String - A choice of the following: 'json', 'html', 'xml'. Default is 'html'. (Optional)
 *   allowedFormats : [String] - Allowed view types that can be rendered. Eg: ['html']. Default is none. (Optional)
 */
 
var formatFields = require('../helper.model').formatFields;
var parseBody = require('../helper.controller').parseBody;

function init() {
  // Setup displayed fields for each controller action
  var map = this._fieldArr;
  for (var key in this) {
    if (typeof this[key] === 'function') {
      var fieldStr = this[key+'_fields'];
      if (!fieldStr) fieldStr = '';
      if (!(fieldStr in map)) map[fieldStr] = formatFields(this._model.schema, fieldStr);
    }
  }
}

function attachAsArrayFunction(controller, actionName) {
  controller._model.prototype.asArray = function() {
    var data = [], doc = this;
    var fieldStr = controller[actionName+'_fields'];
    controller._fieldArr[fieldStr].forEach(function(f) {
      data.push(doc[f]);
    });
    return data;
  };
}

function populateSelection(controller, actionName, callback) {
  var fields = controller._fieldArr[controller[actionName+'_fields']];
  var mongoose = controller._model.base;
  var i = 0;
  function traverseField() {
//    console.log(i);
    if (i >= fields.length) return callback();
    var field = fields[i++];
    if (field.type === 'ObjectId') {
      field.values = [];
      mongoose.model(field.ref).find({}, function(err, docs) {
        docs.forEach(function(doc) {
          var text;
          if (doc._label) text = doc._label();
          else text = doc.id;
          field.values.push({id:doc.id, text:text});
        });
       //console.log(field);
        process.nextTick(traverseField);
      });
    } else {
      process.nextTick(traverseField);
    }
  }
  traverseField();
}


//TODO: create function to generate url from relative path
function resolveRedirect(str) {
  if (str === 'back') return str;
  
}

/** Handles mongoose errors */
function handleError(err, next) {
  //console.log(err);
  if (err.name === 'CastError' && err.type === 'ObjectId') next();
  else return next(err);
}

function createOptions(controller, actionName, records, options) {
  options = options || {};
  options._controller = controller;
  options._actionName = actionName;
  options._modelName = controller._model.modelName, 
  options._view = controller[actionName+'_view'] || actionName;
  options._layout = controller[actionName+'_layout'] || controller._layout || ['controllerLayout', 'layout'];
  options.data = {fields:controller._fieldArr[controller[actionName+'_fields']]};
  if (Array.isArray(records)) {
    options.data.records = records;
  } else {
    options.data.record = records;
  }
  options.title = actionName + ' ' + options._modelName;
  return options;
}

var defaultActions = ['list', 'new', 'create', 'edit', 'confirmDelete', 'show', 'update', 'multiUpdate', 'delete', 'multiDelete', 'modify'];

var BasicCrud = module.exports = function(params) {
  require('./Base').call(this, params);
  var actions = [];
  if (params.actions) {
    var sActions = params.actions.split(/\s+/);
    if (sActions[0] === '-') {
      defaultActions.forEach(function(a) {
        if (sActions.indexOf(a) >= 0) actions.push(a);
      });
    } else {
      sActions.forEach(function(a) {
        //if (defaultActions.indexOf(a) >= 0) 
        actions.push(a);
      });
    }
  } else {
    actions = defaultActions;
  }
  Object.defineProperties(this, {
    _model : {value:params.model},
    _fieldArr : {value:{}},
    _actions : {value: actions},
  });
};

Object.defineProperties(BasicCrud.prototype, {
  _init : {value: init}
});

BasicCrud.prototype.list = function(req, res, next){
  var p = req.query.p || this.list_p; // page number
  var pp = req.query.pp || this.list_pp; // number of record per page
  var sort = req.query.sort || this.list_sort; // sort parameter, eg: sort='name -email'
  var filter;
  var c = this;
  if (typeof c.list_filter === 'function') filter = c.list_filter(req);
  else filter = c.list_filter;
  var query = c._model.find(filter, c.list_fields, {sort: sort, skip:(p-1)*pp, limit:pp, lean: true});
  if (Array.isArray(c.list_populate)) c.list_populate.forEach(function(item) {
    query.populate(item);
  });
  query.exec(function(err, records) {
    if (err) return handleError(err, next);
    attachAsArrayFunction(c, 'list');
    req.format = c.list_format || req.format;
    var options = createOptions(c, 'list', records);
      //actionMenu: [{label:'New', link:controller.controllerName+controller.new_route}],
      //_route: req.url
    if (typeof c.list_process === 'function') c.list_process(options);
    res.respond(options);
    //menus: activate, deactivate, delete
  });
};
BasicCrud.prototype.list_method = 'get';
BasicCrud.prototype.list_route = '';
BasicCrud.prototype.list_fields = '';
BasicCrud.prototype.list_sort = '_id';
BasicCrud.prototype.list_p = 1;
BasicCrud.prototype.list_pp = 100;


BasicCrud.prototype.new = function(req, res, next){
  var controller = this;
  attachAsArrayFunction(controller, 'new');
  populateSelection(controller, 'new', function(){
    var options = createOptions(controller, 'new', null, {
      _controllerPath:req.route.path.slice(0, -4)
    });
    res.respond(options);
  });
};
BasicCrud.prototype.new_method = 'get';
BasicCrud.prototype.new_route = '.new';
BasicCrud.prototype.new_fields = '';


BasicCrud.prototype.create = function(req, res, next){
  var controller = this;
  //console.log('create');
  this._model.create(req.body, function(err, doc) {
    if (err) return handleError(err, next);
    //console.log('create 1');
    //res.message('Information updated!');
    var populate = controller.create_populate;
    var redirpath = req.body._redirect;
    function go(err, doc) {
      //console.log('create go');
      if (err) return handleError(err, next);
      var options = createOptions(controller, 'create', doc.toJSON(), {_redirect:redirpath});
      res.respond(options);
    }
    if (populate) doc.populate(populate, go);
    else go(null, doc);
  });
};
BasicCrud.prototype.create_method = 'post';
BasicCrud.prototype.create_route = '';
BasicCrud.prototype.create_pre = [parseBody];


function commonEditOrShow(req, res, next, controller, actionName) {
  var query = controller._model.findById(req.params.id, controller[actionName+'_fields'], {lean:true});
  var populate = controller[actionName + '_populate'];
  if (Array.isArray(populate)) populate.forEach(function(item) {
    query.populate(item);
  });
  query.exec(function(err, doc) {
    if (err) return handleError(err, next);
    attachAsArrayFunction(controller, actionName);
    var options = createOptions(controller, actionName, doc);
    if (doc == null) {
      options._view = 'error';
      options.message = 'Record not found';
    }
    res.respond(options);
  });
}

// Html form will do post to /module/controller/:id
BasicCrud.prototype.edit = function(req, res, next) {
  var controller = this;
  populateSelection(controller, 'edit', function(){
    commonEditOrShow(req, res, next, controller, 'edit');
  });
};
BasicCrud.prototype.edit_method = 'get';
BasicCrud.prototype.edit_route = '/:id.edit'; 
BasicCrud.prototype.edit_fields = '';


BasicCrud.prototype.confirmDelete = function(req, res, next){
  commonEditOrShow(req, res, next, this, 'confirmDelete');
};
BasicCrud.prototype.confirmDelete_method = 'get';
BasicCrud.prototype.confirmDelete_route = '/:id.delete';
BasicCrud.prototype.confirmDelete_fields = '';


// Show or display edit form
BasicCrud.prototype.show = function(req, res, next){
  commonEditOrShow(req, res, next, this, 'show');
};
BasicCrud.prototype.show_method = 'get';
BasicCrud.prototype.show_route = '/:id';
BasicCrud.prototype.show_fields = '';

function isEmpty(val) {
  if (typeof val === 'string') return val.trim() === '';
  else if (Array.isArray(val)) return val.length === 0;
  else if (typeof val === 'object') return Object.keys(val).length === 0;
  else return Boolean(val);
}

BasicCrud.prototype.update = function(req, res, next){
  var controller = this;
  //console.log('update');
  this._model.findById(req.params.id, function (err, doc) {
    if (err) return handleError(err, next);
    var options = createOptions(controller, 'update', doc, {_redirect:req.body._redirect});
    options.data.fields.forEach(function(field) {
      var key = field.name;
      //console.log(doc.schema.path(key));
      if (doc.hasOwnProperty(key) || !isEmpty(req.body[key])) {
        doc[key] = req.body[key];
        if (field.type === 'Mixed') doc.markModified(key);
      }
    });
    doc.save(function(err){
      if (err) return handleError(err, next);
      res.respond(options);
    });
  });
/*  
  this._model.findByIdAndUpdate(req.params.id, { $set: req.body }, function(err, count) {
    if (err) return handleError(err, next);
    //res.message('Information updated!');
    //res.redirect('back');
    var options = createOptions(controller, 'update', null, {count:count, _redirect:req.body._redirect});
    res.respond(options);
  });
*/
};
BasicCrud.prototype.update_method = 'put';
BasicCrud.prototype.update_route = '/:id';
BasicCrud.prototype.update_fields = '';
BasicCrud.prototype.update_pre = [parseBody];

BasicCrud.prototype.multiUpdate = function(req, res, next){
  var controller = this;
  var conditions = {};
  if (req.body._selection && req.body._selection.length > 0) {
    conditions._id = {$in:req.body._selection};
    delete req.body._selection;
  }
  this._model.update(conditions, {$set:req.body}, {multi: true}, function(err, count) {
    if (err) return handleError(err, next);
    var options = createOptions(controller, 'multiUpdate', null, {count:count, _redirect:req.body._redirect});
    res.respond(options);
  });
};
BasicCrud.prototype.multiUpdate_method = 'put';
BasicCrud.prototype.multiUpdate_route = '';
BasicCrud.prototype.multiUpdate_view = 'update';
BasicCrud.prototype.multiUpdate_pre = [parseBody];

/// Delete one record
BasicCrud.prototype.delete = function(req, res, next){
  var controller = this;
  this._model.remove({_id:req.params.id}, function(err) {
    if (err) return handleError(err, next);
    if ('string' === typeof req.body._redirect) {
      res.respond(createOptions(controller, 'delete', null, {_redirect:req.body._redirect}));
    } else {
      res.send(req.body);
    }
  });
};
BasicCrud.prototype.delete_method = 'delete';
BasicCrud.prototype.delete_route = '/:id';
BasicCrud.prototype.delete_pre = [parseBody];

/// Delete all/multiple records
BasicCrud.prototype.multiDelete = function(req, res, next){
  var controller = this;
  var conditions = {};
  if (req.body._selection && req.body._selection.length > 0) {
    conditions._id = {$in:req.body._selection};
    delete req.body._selection;
  }
  this._model.remove(conditions, function(err) {
    if (err) return handleError(err, next);
    if ('string' === typeof req.body._redirect) {
      res.respond(createOptions(controller, 'multiDelete', null, {_redirect:req.body._redirect}));
    } else {
      res.send(req.body);
    }
  });
};
BasicCrud.prototype.multiDelete_method = 'delete';
BasicCrud.prototype.multiDelete_route = '';
BasicCrud.prototype.multiUpdate_view = 'delete';
BasicCrud.prototype.multiUpdate_pre = [parseBody];

//BasicCrud.prototype.softDelete put :id

// add routes to default values
var defaults = require('./defaults');
for (var key in BasicCrud.prototype) {
  defaults.routes[key] = BasicCrud.prototype[key+'_route'];
}
