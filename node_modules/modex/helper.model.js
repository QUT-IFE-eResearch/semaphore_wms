"use strict";

var Field = exports.Field = function(name, type, label) {
  this.name = name;
  this.type = type;
  label = label || (name[0].toUpperCase() + name.slice(1));
  this.label = label;
};

function extractField(schemaField) {
  var field = new Field(schemaField.path, undefined, schemaField.options.label);
  var schemaType = schemaField.options.type;
  if (Array.isArray(schemaType)) {
    field.type = 'Array';
    if (schemaField.schema) {
      field.of = 'Object';
      field.fields = [];
      for (var name in schemaField.schema.paths) {
        field.fields.push(extractField(schemaField.schema.path(name)));
      }
    } else {
      if (typeof schemaType[0] === 'object') field.of = schemaType[0].type.name
      else field.of = schemaType[0].name;
    }
  } else {
    field.type = schemaType.name;
    if (schemaType.name === 'ObjectId' && schemaField.options.ref) {
      field.ref = schemaField.options.ref;
    }
    if (schemaType.name === 'String' && schemaField.options.multiline) {
      field.multiline = schemaField.options.multiline;
    }
  }
  return field;
}

exports.formatFields = function formatFields(schema, fields) {
  var excluded = {};
  var fieldArr = [];
  var name, exname, isExcluded;
  function addField(name) {
    var field = schema.path(name);
    if (field) fieldArr.push(extractField(field));
  }
  
  if (fields) fields.split(/\s+/).forEach(function (name) {
    if (!name) return;
    if (name[0] === '-') {
      name = name.substring(1);
      excluded[name] = 0;
    } else {
      addField(name);
    }
  });
  //console.log(excluded);
  if (fieldArr.length === 0) {
    for (name in schema.paths) {
      if (name[0] !== '_') {
        isExcluded = false; 
        for (exname in excluded) {
          if (startsWith(name, exname)) {
            isExcluded = true;
            break;
          }
        }
        if (!isExcluded) addField(name);
      }
    }
  }
  return fieldArr;
};

function startsWith(str, prefix){
  return str.slice(0, prefix.length) === prefix;
};

function trimDots(str) {
  return str.replace(/^\.+|\.+$/g,'');
}

function splitAtLastToken(str, token) {
  var tokenPos = str.lastIndexOf(token);
  if (tokenPos > 0 && tokenPos < str.length - 1) {
    return [str.slice(0, tokenPos), str.slice(tokenPos+1)];
  }
}