"use strict";

var path = require('path');
var helper = require('../helper.view');
var utils = require('../utils');
var loadCompiledView = utils.loadCompiledView;
var isAbsolute = utils.isAbsolute;
var eachDirInDir = utils.eachDirInDir;
var eachFileInDir = utils.eachFileInDir;

var views = module.exports = {};
views.viewType = 'basic';
//var availablePaths = views.paths = {};

function getView(name) {
  return views[views.viewType][name];
}

function getCompiledView(name) {
  return loadCompiledView(getView(name));
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// Renderers
var renderers = views.renderers = {};

renderers.html = function(res, options, fn) {
  if (options._redirect) {
    res.redirect(options._redirect);
  } else {
    //resolve view
    //1. Check the property in the module
    //2. Find in the `views` subdirectory of the module, ie: /path/to/module/views
    //3. Use the app level default views path
    //4. Lookup the views provided by modex
    var view = options._view || 'index';
    var helperInstance = res.locals._;
    helperInstance.view = view;
    var layouts = options._layout;
    var callback = fn;
    var mods = res.locals._entity;
    //console.log(view);
    if (mods && !isAbsolute(view)) {
      var view1;
      if (options._controllerName) view1 = mods.owner.resolveView(options._controllerName + '/' + view);
      view = view1 || mods.owner.resolveView(view, false, options) || mods.parent.resolveView(view, true, options) || getView(view) || view;
    }
//    console.log(mods.owner.views);
    if (layouts) {
      var defaultCallback = function(err, str) {
        if (err) return res.req.next(err);
        res.send(str);
      };
      if (!Array.isArray(layouts)) layouts = [layouts];
      var processLayout = function (layout) {
        var opt = Object.create(options);
        if (layout && !isAbsolute(layout)) {
          var layoutFromMods;
          if (mods) layoutFromMods = mods.owner.resolveView(layout, false, opt) || mods.parent.resolveView(layout, true, opt);
          layout = layoutFromMods || getView(layout) || layout;
        }
        var prevCallback = callback;
        callback = function(err, str) {
          if (err) return res.req.next(err);
          if (typeof layout === 'function') {
            prevCallback = prevCallback || defaultCallback;
            layout(str, res.render.bind(res), prevCallback);
          } else {
            helperInstance.setPartial('body', str);
            res.render(layout, opt, prevCallback);
          }
        };
      };
      for (var i=layouts.length; i--; ) processLayout(layouts[i]);
    }
    res.render(view, options, callback);
  }
};

renderers.xml = function(res, options) {
  res.send(406, 'Unsupported format: "xml"');
};

renderers.json = function(res, options) {
  var obj = {};
  if (options.data) {
    if (options.data.record) obj = options.data.record;
    else if (options.data.records) obj = options.data.records;
  } else if (options.json) {
    obj = options.json;
  } else {
    obj = options.message;
  }
  res.json(obj);
//  if (options.data.records.length === 1) res.json(options.data.records[0]);
//  else res.json(options.data.records);
};

renderers.unknown = function(res) {
  res.send(406, 'Unsupported format: "' + res.req.format + '"');
};

renderers.default = renderers.html;

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// Load default views
eachDirInDir(__dirname, function(basename, fullpath) {
  views[basename] = {};
  eachFileInDir(fullpath, function(name, fp) {
    var namenoext = path.basename(name, path.extname(name));
    var rname1 = path.relative(fullpath, fp);
    var dirname = path.dirname(rname1);
    var rname2 = path.join(dirname, namenoext); //without ext
    if (namenoext === 'index') views[basename][dirname.replace('\\','/')] = fp;
    else views[basename][rname1.replace('\\','/')] = views[basename][rname2.replace('\\','/')] = fp;
  }, true);
});

//////////////////////////////////////////////////////////////////////////////
//setup default field partials

var fieldFormatter = {
  'String':formatString,
  'Number':formatString,
  'Boolean':formatBoolean,
  'Date':formatString,
  'Buffer':formatBuffer,
  'Mixed':formatString,
  'Object':formatString,
  'ObjectId':formatString,
  'Array':formatArray
};

function fieldRead(opt) {
  return fieldFormatter[opt.field.type](opt);
}

helper.setForm('', function() {return '';});
helper.setForm('read', getCompiledView('partials/dl'));
helper.setForm('write', getCompiledView('partials/form'));

var fieldFormInput = getCompiledView('partials/field_form_input');
var fieldFormSelect = getCompiledView('partials/field_form_select');
var fieldFormTextarea = getCompiledView('partials/field_form_textarea');
var fieldLabel = getCompiledView('partials/field_label');
helper.setPartial('_fieldLabel', fieldLabel);

var fieldForm = {
  'String':inputText,
  'Number':inputText,
  'Boolean':inputCheckbox,
  'Date':inputText,
  'Buffer':inputNone,
  'Mixed':textarea,
  'Object':fieldSet,
  'ObjectId':select,
  'Array':formArray
};
var fieldFormArray = {
  'String':textareaCsv,
  'Number':textareaCsv,
  'Boolean':textareaCsv,
  'Date':textareaCsv,
  'Buffer':inputNone,
  'Mixed':textareaCsv,
  'Object':subdocuments,
  'ObjectId':'select_multiple',
  'Array':'editable_table'
};

function fieldWrite(opt) {
  var label = helper.partial('_fieldLabel', {id:'form_'+opt.field.name, label:helper.label(opt.field.name)});
  return label + fieldForm[opt.field.type](opt);
}

helper.setField({view:'show'}, fieldRead);
helper.setField({view:'list'}, fieldRead);
helper.setField({view:'new'}, fieldWrite);
helper.setField({view:'edit'}, fieldWrite);

function createTextOptions(type, name, value) {
  return {
    id: 'form_'+name,
    name: name,
    type: type,
    value: stringify(value),
    checked: false,
    accept: '',
    disabled: false,
    readonly: false,
    multiple: false
  };
}

function stringify(value) {
  if (typeof value === 'string') {
    return value;
  } else {
    if (value == null) return '';
    else if (typeof value === 'object' && !Array.isArray(value)) return JSON.stringify(value);
    else return value.toString();
  }
}

function inputText(opt) {
  var options = createTextOptions('text', opt.field.name, opt.value);
  if (opt.field.multiline) {
    return fieldFormTextarea(options);
  } else {
    return fieldFormInput(options);
  }
}

function inputCheckbox(opt) {
  var options = createTextOptions('checkbox', opt.field.name, 'true');
  options.checked = opt.value;
  return fieldFormInput(options);
}

function inputNone(opt) {
  return '';
}
function formArray(opt) {
  return '';
}
function fieldSet(opt) {
  return '';
}
function select(opt) {
  var options = {name: opt.field.name, id: 'form_' + opt.field.name, value: opt.value, multiple:false, options: opt.field.values};
  return fieldFormSelect(options);
}
function textarea(opt) {
  return fieldFormTextarea(createTextOptions('textarea', opt.field.name, opt.value));;
}
function textareaCsv(opt) {
  return '';
}
function subdocuments(opt) {
  return '';
}


/*
input_text
input_password
input_hidden
input_radio
textarea
select_multiple
select
*/
// Default formatters
function formatString(opt) {
  return stringify(opt.value);
}
function formatBoolean(opt) {
  if (!opt.value) opt.value = false;
  var val = opt.value;
  if (opt.field.labels) val = opt.field.labels[opt.value];
  return val.toString();
}
function formatBuffer(opt) {
  if (!opt.value) return '';
  return 'Buffer size: ' + opt.value.length;
}
function formatArray(opt) {
  if (!opt.value) return '';
  var str = '[';
  opt.value.forEach(function(item, index) {
    if (index > 0) str += ', ';
    var field = {name:opt.field.name, type:opt.field.of};
    str += fieldFormatter[opt.field.of]({field:field, value:item});
  });
  str += ']';
  return str;
}


