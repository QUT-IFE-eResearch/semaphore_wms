"use strict";
/*
 * A module helper class for Express.js modular framework.
 */

var fs = require('fs');
var path = require('path');
var cDef = require('./controllers/defaults');

var modex;

var Mod = function(xmod) {
  this._xmod = xmod;
};

exports = module.exports = function(_modex) {
  modex = _modex;
  Mod.prototype.app = Mod.app = modex.app;
  return Mod;
};

function resolveBase(params, xmod) {
  var routeBase;
  var modBase = xmod;
  if (params.route) {
    routeBase = params.route;
  } else {
    if (params.interface) modBase = modex.findByInterface(params.interface);
    else if (params.module) modBase = modex.findByNamespace(params.module);
    if (!modBase) modBase = xmod;
    routeBase = modBase.getRoutePath();
  }
  if (routeBase[routeBase.length-1] === '/') routeBase = routeBase.slice(0,-1);
  return {route:routeBase, module:modBase};
}

function forEachFileInDir(fullPath, callback, recursive) {
  var files = fs.readdirSync(fullPath);
  files.forEach(function(filename){
    var fp = path.join(fullPath, filename);
    if (fs.statSync(fp).isDirectory()) {
      if (recursive) forEachFileInDir(fp, callback, recursive);
    } else { 
      callback(path.join(fp));
    }
  });
}

Object.defineProperty(Mod.prototype, 'route', {
  get : function() { return this._xmod.main.route; },
  set : function(val) { this._xmod.main.route = val; }
});

/**
 * Mount the controller to the route: module_base_route/controller_name
 * controller : String | Object (required) : The controller object or path to the js file, relative to the module dir.
 * params:
 *   name : String (auto) : Name of the controller, will be used in the routing path. If not specified, the name of the js file will be used. 
       Use string '/' to mount the controller as the default module handler.
 *   Specify either one these, resolved in order of: route | interface | module
 *   interface | module : Request to adds the controller to the specified interface or module (namespaced), if exists. Default will mount the controller to the parent module.
 *   route : String : An absolute base route path to mount the controller to, instead of the module base route. Ie: baseRoute/name
 *   layout : String : Absolute or relative path to layout template file.
 */
Mod.prototype.addController = function addController(controller, params) {
  if (typeof params !== 'object') params = {};
  var xmod = this._xmod;
  var mod = xmod.main;
  if (!mod.controllers) mod.controllers = {};
  if (typeof controller === 'string') {
    // Resolve path and load controller object
    var fullpath = path.resolve(xmod.path, controller);
    controller = require(fullpath);
    // Automatic naming based on object property or filename
    if (!params.name) {
      if (controller.controllerName) {
        params.name = controller.controllerName;
      } else {
        params.name = path.basename(fullpath, '.js');
        Object.defineProperty(controller, 'controllerName', {value:params.name});
      }
    }
  } else if (typeof controller !== 'object') {
    throw new Error('Error in initializing module [%s]: controller must be an object or a string.', xmod.namespace);
  }
  if (!params.name) {
    if (controller.controllerName) params.name = controller.controllerName;
    else throw new Error('Error in initializing module [%s]: Please specify a name for the controller.', xmod.namespace);
  } else if (params.name === '/') {
    params.name = '';
  }
  // Add the controller
  mod.controllers[params.name] = controller;
  if (typeof controller._init === 'function') controller._init();
  // Resolve route base path
  var base = resolveBase(params, xmod);
  var routeBase = base.route + '/' + params.name;
  // Add to express route
  var action, callbacks;
  function processCallbacks(a) {
    if (Array.isArray(a)) {
      a.forEach(function(b){callbacks.push(b);});
    } else if (typeof a === 'function') {
      callbacks.push(a);
    }
  }
  for (var actionName in controller) {
    action = controller[actionName];
    if (actionName[0] !== '_' && typeof action === 'function') {
      callbacks = [];
      [controller[actionName+'_pre'], action, controller[actionName+'_post']].forEach(processCallbacks);
      if (callbacks.length > 0) {
        var method = controller[actionName+'_method'] || 'get';
        var route;
        if (controller[actionName+'_absroute']) {
          route = controller[actionName+'_absroute'];
        } else {
          var actionRoute = controller[actionName+'_route'];
          if (typeof actionRoute === 'string') route = actionRoute;
          else if (typeof cDef.routes[actionName] === 'string') route = cDef.routes[actionName] 
          else route = '/' + actionName;
          route = routeBase + route;
        }
        //modex.app[method](route, callbacks);
        modex.registerRoute(xmod, base.module, method, route, callbacks);
      }
    }
  }
  
};

// Load all js files from a directory. Non recursive
Mod.prototype.addControllers = function addControllers(pathToDir) {
  var basePath = pathToDir[0] === '/' ? pathToDir : path.join(this._xmod.path, pathToDir);
  forEachFileInDir(basePath, this.addController.bind(this));
  //    throw new Error('Error in initializing module [%s]: Error loading directory: %s', this._xmod.namespace, fullPath);
};

Mod.prototype.addDefaultController = function addDefaultController(pathOrController) {
  this.addController(pathOrController, {name:'/'});
};

/**
 * Load the model to be made available to other modules
 * model : String | Object (required) : The model object or path to the js file, relative to the module dir.
 * params:
 *   name : String : Name of the model. If omitted, the model.modelName property will be used.
 */
Mod.prototype.addModel = function addModel(model, params) {
  if (typeof params !== 'object') params = {};
  var xmod = this._xmod;
  var mod = xmod.main;
  var filepath;
  if (!mod.models) mod.models = {};
  if (typeof model === 'string') {
    filepath = model;
    // Resolve path and load model object
    model = path.resolve(xmod.path, model);
    model = require(model);
  } else if (typeof model !== 'object') {
    throw new Error('Error in initializing module [%s]: model must be an object or a string.', xmod.namespace);
  }
  // Automatic naming based on modelName and filename
  if (!params.name) {
    if (model.modelName) params.name = model.modelName;
    else params.name = path.basename(filepath, '.js');
  }
  mod.models[params.name] = model;
};

Mod.prototype.addModels = function addModels(pathToDir) {
  var basePath = pathToDir[0] === '/' ? pathToDir : path.join(this._xmod.path, pathToDir);
  forEachFileInDir(basePath, this.addModel.bind(this));
};

/** Returns the route full path of the specified module */
Mod.prototype.moduleRoute = function moduleRoute(moduleName) {
  var mod;
  if (moduleName) mod = modex.findByNamespace(moduleName);
  if (!mod) throw new Error('Module not found.');
  return mod.getRoutePath();
};

/** Returns the route full path of the specified interface */
Mod.prototype.interfaceRoute = function interfaceRoute(name) {
  if (name) {
    var mod = modex.findByInterface(name);
    if (mod) return mod.getRoutePath();
  }
  throw new Error('Interface not found.');
};

/**
 * Mount the handler to the route: module_base_route/route
 * method : String (required) : The HTTP method to be handled.
 * route : String (required) : The relative route.
 * params:
 *   Specify either one these, resolved in order of: route | interface | module
 *   interface | module : Request to adds the controller to the specified interface or module (namespaced), if exists. Default will mount the controller to the parent module.
 *   route : String : An absolute base route path that will be prepended to the route. Ie: params.route/route
 */
/** params : (Optional)*/
Mod.prototype.addHandler = function addHandler(method, route, params, callbacks) {
  if (!callbacks) {
    callbacks = params;
    params = {};
  }
  try {
    var xmod = this._xmod;
    var base = resolveBase(params, xmod);
    modex.registerRoute(xmod, base.module, method, base.route + route, callbacks);
  } catch (e) {
    modex.logger.error('Initialize module [%s]: addHandler() : %s', xmod.namespace, e);
  }
};


Mod.prototype.addView = function addView(pathToTemplate, name) {
  var xmod = this._xmod;
  var mod = xmod.main;
  var fullpath = path.resolve(xmod.path, pathToTemplate);
  //var ext = path.extname(pathToTemplate);
  //if (!template) { // load template from file
  //  template = fs.readFileSync(fullpath,'utf8');
  //}
  if (!name) name = path.basename(pathToTemplate);
  if (!mod.views) mod.views = {};
  //if (!(name in mod.views)) mod.views[name] = {};
  //extension without dot
  //ext = ext.slice(1);
  mod.views[name] = fullpath;
};

Mod.prototype.addViews = function addViews(pathToDir) {
  var basePath = pathToDir[0] === '/' ? pathToDir : path.join(this._xmod.path, pathToDir);
  var self = this;
  forEachFileInDir(basePath, function(fp) {
    var name = path.relative(basePath, fp);
    self.addView(fp, name);
  }, true);
};
