<% _.style(_.url.action('static')+'/experiment.css') %>

<div data-ng-app="experiment">

<div class="navbar navbar-static-top">
  <div class="navbar-inner">
    <a class="brand" href="#">Manage Experiment</a>
  </div>
</div>
<div class="container-fluid">
  <div class="row-fluid" data-ui-view></div>
</div>
<!--
<hr>
<pre>
  $state = {{$state.current.name}}
  $stateParams = {{$stateParams}}
</pre>
-->

<script type="text/ng-template" id="experiments.html">
  <div class="span2">
    <div class="pa-sidebar well well-small">
      <h4>My Experiments</h4>
      <ul id="sideListMyExperiment" class="nav nav-list">
        <li data-ng-class="{ active: $state.includes('experiments.list') }"><a href="#"><strong>All Experiments</strong></a></li>
        <li data-ng-repeat="experiment in experiments" data-ng-class="{ active: $stateParams.expId == experiment._id  }">
          <a href="#/{{experiment._id}}" >{{experiment.name}}</a>
        </li>
      </ul>
      <hr/>
      <!--<button class="btn btn-primary" data-ng-click="newExp()"><i class="icon-white icon-plus-sign"></i>&nbsp;New Experiment</button>-->
      <a href="#/new" class="btn btn-primary"><i class="icon-white icon-plus-sign"></i>&nbsp;New Experiment</a>
    </div>
  </div>
  <div class="span10" data-ui-view></div>
</script>

<script type="text/ng-template" id="experiments.list.html">
  <h2>All Experiments </h2>
  <table class="table table-hover">
    <tr><th>Name</th><th>Description</th><th>Type</th><th>Keywords</th><th>Geographical Coverage</th><th>Temporal Coverage</th></tr>
    <tr data-ng-repeat="experiment in experiments">
      <td><a href="#/{{experiment._id}}">{{experiment.name}}</a></td>
      <td>{{experiment.desc}}</td>
      <td>{{experiment.workflow.name}}</td>
      <td>{{experiment.keywords.join(', ')}}</td>
      <td>{{experiment.geocov}}</td>
      <td>{{experiment.temcov}}</td>
    </tr>
  </table>    
</script>

<script type="text/ng-template" id="experiments.detail.html">
    <div class="row-fluid"> 
      <div class="span6">
        <div class="well well-small" data-ui-view="expMeta"></div>
      </div>
      <div class="span6" data-ng-show="$state.includes('experiments.detail.show')"> 
        <div class="well well-small" data-ui-view="expFiles"></div>
        <div class="well well-small" data-ui-view="expRuns"></div>
      </div>
    </div>
</script>

<script type="text/ng-template" id="experiments.form.html">
  <div class="well well-small"> 
    <div class="row-fluid"> 
      <div class="span6">
        <form name="expMetaForm">
          <div>
            <div class="pull-right">
              <button data-ng-click="save()" data-ng-disabled="isClean() || expMetaForm.$invalid" class="btn btn-primary">Save</button>
              <button onclick="window.history.back()" class="btn">Cancel</button>
            </div>
            <h4 data-ng-show="experiment==null">New Experiment</h4>
            <h4 data-ng-show="experiment!=null">Edit Experiment</h4>
          </div>
          <br/>
          <div class="well well-small">
            <input type="hidden" name="_id" data-ng-model="experiment._id" />
            <div class="control-group" data-ng-class="{error: expMetaForm.name.$invalid}">
              <label for="name">Name</label>
              <input class="span10" type="text" name="name" data-ng-model="experiment.name" required />
              <span data-ng-show="expMetaForm.name.$error.required" class="help-inline">Required</span>
              <label for="workflow">Model Type</label>
              <select class="span10" name="workflow" data-ng-options="wf._id as wf.name for wf in workflows" data-ng-model="experiment.workflow" required></select>
              <span data-ng-show="expMetaForm.workflow.$error.required" class="help-inline">Required</span>
            </div>
            <label for="desc">Description</label>
            <textarea class="span10" name="desc" data-ng-model="experiment.desc"></textarea>
            <label for="keywords">Keywords</label>
            <input class="span10" type="text" name="keywords" data-ng-model="experiment.keywords" data-ng-list/>
            <label for="geocov">Geographic Coverage</label>
            <input class="span10" type="text" name="geocov" data-ng-model="experiment.geocov"/>
            <label for="tempcov">Temporal Coverage</label>
            <input class="span10" type="text" name="tempcov" data-ng-model="experiment.temcov"/>
          </div>
        </form>
      </div> <!-- span6 -->
    </div> <!-- row-fluid -->
  </div> <!-- well -->
</script>

<script type="text/ng-template" id="experiments.show.html">
  <div class="well well-small"> 
    <div class="row-fluid"> 
      <div class="span12">
        <div class="pull-right">
          <a href="#/{{experiment._id}}/edit" class="btn btn-primary"><i class="icon-white icon-edit"></i>&nbsp;Edit</a>
          <a data-ng-click="destroy()" class="btn btn-danger"><i class="icon-white icon-remove"></i>&nbsp;Delete</a>
        </div>
        <h4>Experiment {{experiment.name}}</h4>
      </div>
    </div>
    <div class="row-fluid"> 
      <div class="span4">
        <div id="panelMetadata" class="well well-small"> 
          <h5>Metadata</h5>
          <dl>
            <dt>Name</dt>
            <dd>{{experiment.name}}</dd>
            <dt>Model Type</dt>
            <dd>{{experiment.workflow.name}}</dd>
            <dt>Description</dt>
            <dd>{{experiment.desc}}</dd>
            <dt data-ng-show="experiment.keywords.length">Keywords</dt>
            <dd data-ng-show="experiment.keywords.length">{{experiment.keywords.join(', ')}}</dd>
            <dt data-ng-show="experiment.geocov">Geographic Coverage</dt>
            <dd data-ng-show="experiment.geocov">{{experiment.geocov}}</dd>
            <dt data-ng-show="experiment.temcov">Temporal Coverage</dt>
            <dd data-ng-show="experiment.temcov">{{experiment.temcov}}</dd>
          </dl>
        </div>
      </div> <!--span4-->
      <div class="span4">
        <div id="panelInputFiles" class="well well-small">
          <button class="btn btn-primary pull-right" data-ng-click="openAddInput()"><i class="icon-white icon-plus-sign"></i>&nbsp;Add</button>
          <h5>Input Files</h5>
          <table class="table">
            <thead>
              <tr><th><input type="checkbox" data-ng-model="masterSelect" data-ng-change="selectAllFiles()"/></th><th>File Name<br/>Revision (Year-Month-Day)</th><th></th></tr>
            </thead>
            <tbody>
            <tr data-ng-repeat="file in experiment.files">
              <td><input type="checkbox" data-ng-model="file.selected"/></td>
              <td>
                {{file.name}} <br/>
                <select name="version" data-ng-options="ver.label for ver in file.versions" data-ng-model="file.version"></select>
              </td>
              <td>
                <a data-ng-href="{{createInputUrl(file.name, file.version.id, file.version.url)}}" target="_blank" title="Download"><i class="icon-download"></i></a>&nbsp;
                <a data-ng-href="{{createInputViewUrl(file.name, file.version.id)}}" target="_blank" title="View"><i class="icon-eye-open"></i></a>&nbsp;
                <a data-ng-click="removeInput(file)" title="Delete"><i class="icon-remove"></i></a>&nbsp;
              </td>
            </tr>
            </tbody>
          </table>    
        </div>
      </div>
      <div class="span4">
        <div id="panelRun" class="well well-small">
          <h5>Experiment Runs</h5>
          <form>
            <fieldset><legend>Create new run</legend>
            <label for="runName">Name (optional): </label>
            <input type="text" name="runName" data-ng-model="newRun.name" placeholder="{{newRun.defName}}"/>
            <label for="runDesc">Description (optional): </label>
            <textarea name="runDesc" data-ng-model="newRun.desc"></textarea>
            <br/>
            <button class="btn btn-primary" data-ng-click="run()" data-ng-disabled="isRunWaiting"><i class="icon-white icon-play"></i>&nbsp;Run Experiment</button>
            </fieldset>
          </form>
          <h6>Run History</h5>
          <table class="table table-condensed">
            <thead>
              <tr><th>Run at</th><th>Name</th><th>Status</th><th></th></tr>
            </thead>
            <tbody>
            <tr data-ng-repeat="run in experiment.runs">
              <td>{{run.timestart | date:'yyyy-MM-dd HH:mm:ss'}}</td>
              <td><a title="{{run.desc}}" data-ng-click="openViewRun(run)">{{run.name}}</a></td>
              <td>{{run.status}}</td>
              <td><a data-ng-show="run.status=='end' || run.status=='error'" data-ng-click="removeRun($index)" title="Delete"><i class="icon-remove"></i></a></td>
            </tr>
            </tbody>
          </table>    
        </div>
      </div>
    </div> <!--row-fluid-->
  </div>
  <div id="panelAddInput" modal="modalAddInput" close="closeAddInput()" options="opts">
    <div class="modal-header"><h4>Add Input File</h4></div>
    <div class="modal-body">
      <p>Upload an existing file.</p>
      <div class="btn-group">
        <button type="button" class="btn btn-info" data-ng-model="uploadType" btn-radio="'localUpload'" title="Upload file in local computer">Local upload</button>
        <button type="button" class="btn btn-info" data-ng-model="uploadType" btn-radio="'remoteUpload'" title="Upload file in remote computer">Remote upload</button>
      </div>      
      <form data-ng-upload action="{{urlUploadInput}}" data-ng-show="uploadType=='localUpload'"> 
        <input type="hidden" name="uploadType" value="localUpload"/>
        <label for="inputFiles">Upload File: </label>
        <input type="file" name="inputFiles" multiple></input><br/>
        <div id="selectedInputFiles" data-ng-show="files">
          <p><strong>Selected File(s):</strong></p>
          <ul class="unstyled"><li data-ng-repeat="f in files">{{f.name}}</li></ul>
        </div>
        <div data-ng-show="uploading">Uploading files.. Please wait..</div>        
        <input class="btn btn-primary" type="submit" value="Upload" upload-submit="results(content, completed)" data-ng-disabled="isFileSelected()"></input>
      </form>
      <form name="formUploadRemote" data-ng-show="uploadType=='remoteUpload'"> 
        <label for="filename">File name: </label>
        <input type="text" name="filename" data-ng-model="remote.filename"></input>
        <label for="url">Remote file URL: </label>
        <input type="url" name="url" data-ng-model="remote.url"></input>
        <div data-ng-show="uploading">Uploading files.. Please wait..</div>        
        <button class="btn btn-primary" type="button" data-ng-click="addRemote('remoteUpload')" >Upload</button>
        <button class="btn btn-primary" type="button" data-ng-click="addRemote('remoteLink')" >Link</button>
      </form>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-warning cancel" data-ng-click="closeAddInput()">Close</button>
    </div>
  </div>
  <div id="panelViewRun" modal="modalViewRun" close="closeViewRun()" options="dialogOptsRun">
    <div class="modal-header"><h4>{{expRun.name}}</h4></div>
    <div class="modal-body">
      <p>{{expRun.desc}}</p>
      <dl class="dl-horizontal">
        <dt>Status:</dt>
        <dd>{{expRun.status}}</dd>
        <dt>Start at:</dt>
        <dd>{{expRun.timestart}}</dd>
        <dt>Finish at:</dt>
        <dd>{{expRun.timefinish}}</dd>
      </dl>
      <div class="row-fluid">
        <div class="span6">
          <h5>Input</h5>
          <div class="list-run-files">
            <ul class="unstyled">
              <li data-ng-repeat="file in expRun.infiles" >
                <a data-ng-href="{{createInputViewUrl(file.name, file.versionId)}}" target="_blank" title="View"><i class="icon-eye-open"></i></a>&nbsp;
                <a data-ng-href="{{createInputUrl(file.name, file.versionId)}}" target="_blank" title="Download">{{file.name}}</a>
              </li>
            </ul>
          </div>
        </div>
        <div class="span6">
          <h5>Output
            <a class="pull-right" href="{{expRun.urlOutputLis}}" target="_blank"><img class="img-rounded" src="http://cdn1.iconfinder.com/data/icons/ie_Shine/24/shine_14.png" height="24" width="24"/></a>
          </h5>
          <div class="list-run-files">
            <ul class="unstyled">
              <li data-ng-repeat="file in expRun.outfiles" >
                <a data-ng-href="{{createOutputViewUrl(file.name, expRun)}}" target="_blank" title="View"><i class="icon-eye-open"></i></a>&nbsp;
                <a data-ng-href="{{urlBase + file.url}}" target="_blank" title="Download">{{file.name}}</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-warning cancel" data-ng-click="closeViewRun()">Close</button>
    </div>
  </div>  
  
</script>

</div> <!--data-ng-app=experiment-->

<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.js"></script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular-resource.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.2.0/ui-bootstrap-tpls.js"></script>
<script type="text/javascript" src="/scripts/angular-ui-router.min.js"></script>
<script type="text/javascript" src="/scripts/ng-upload.min.js"></script>
<script type="text/javascript" src="//cdn.sockjs.org/sockjs-0.3.min.js"></script>
<script type="text/javascript">
  var urlUploadInput = "<%=_.url.action('uploadInput')%>";
  var urlDownloadInput = "<%=_.url.action('downloadInput')%>";
  var urlDataViewer = "<%=_.url.action('dataViewer')%>";
  var urlShow = "<%=_.url.action('show')%>";
  var urlWorkflowShow = "<%=_.url.action('workflowShow')%>";
  var urlAddRun = "<%=_.url.action('addRun')%>";
  var urlBase = "<%=_.url.action('list')%>" + '/';
  //var urlWebsocket = "<%=_.url.module('websocket')%>";
</script>

<script>
// workaround for firefox to stop esc key from disconnecting websocket
window.addEventListener('keydown', function(e) { (e.keyCode == 27 && e.preventDefault()) })

function indexOfById(arr, id) {
  for (var i=0; i<arr.length; ++i) {
    if ((arr[i]._id == id) || (arr[i].id == id)) return i;
  }
}
function findById(arr, id) {
  return arr[indexOfById(arr, id)];
}
function findByAttr(attr,a, id) {
  for (var i=0; i<a.length; i++) {
    if (a[i][attr] == id) return a[i];
  }
}
function findMultipleById(a, id) {
var temp = Array();
  for (var i=0; i<a.length; i++) {
    if (a[i].id == id) temp.push( a[i] );
  }
  return temp;
}
function findInputFileByName(files, filename) {
  for (var i=0; i<files.length; ++i) {
    if (files[i].name == filename) return files[i];
  }
}

function createInputUrl(expId, filename, versionId, url) {
  if (url) return url;
  var params = [versionId, filename, expId];
  return urlDownloadInput.replace(/:\w+/g, function(){ return params.pop() });
}
function createRemoveInputUrl(expId, filename, versionId) {
  var params = [versionId, filename, expId];
  return urlDownloadInput.replace(/:\w+/g, function(){ return params.pop() });
}

function processFiles(filter, exp, updatedFiles) {
  var files = updatedFiles || exp.files;
  angular.forEach(files, function(file) {
    file.selected = true;
    file.version = file.versions[file.versions.length-1];
    angular.forEach(file.versions, function(ver, i) {
      ver.label = '' + (i+1) + ' (' + filter('date')(ver.id, 'yyyy-MM-dd HH:mm:ss') + ')';
    });
  });
  if (updatedFiles) exp.files = files;
}
function createNewRun(exp) {
  var defName = 'Run ' + (exp.runs.length + 1);
  return {defName:defName, name:'', desc:'', infiles:{}};
}

function expController($scope, $state, Experiment) {
  $scope.experiments = Experiment.query();
  $scope.urlBase = urlBase;
}

function expShowController($scope, $state, $filter, $http, $stateParams, websocket, Experiment) {
  $scope.experiment = Experiment.get({id:$stateParams.expId}, function(){
    var id = $scope.experiment._id;
    processFiles($filter, $scope.experiment);
    $scope.newRun = createNewRun($scope.experiment);
    $scope.urlUploadInput = urlUploadInput.replace(/:\w+/, id);
    $scope.urlAddRun = urlAddRun.replace(/:\w+/, id);
    $scope.createInputUrl = function(filename, versionId, url) {
      return createInputUrl(id, filename, versionId, url);
    };
    $scope.createInputViewUrl = function(filename, versionId) {
      return urlDataViewer + '?category=input&expId=' + id + '&expName=' + encodeURIComponent($scope.experiment.name) + '&fileName=' + encodeURIComponent(filename) + '&verId=' + versionId;
    };
    $scope.createOutputViewUrl = function(filename, run) {
      return urlDataViewer + '?category=output&expId=' + id + '&expName=' + encodeURIComponent($scope.experiment.name) + '&fileName=' + encodeURIComponent(filename) + '&runId=' + run._id + '&runName=' + run.name;
    };
    websocket.onMessage('experiment:'+id+'/runStatus', updateRunStatus);
  });
  websocket.clear();
  
  $scope.remote = {};
  $scope.formUploadRemote = {};
  $scope.masterSelect = true;
  $scope.selectAllFiles = function() {
    $scope.experiment.files.forEach(function(file){
      file.selected = $scope.masterSelect;
    });
  };
  $scope.viewTextFile = function(file) {
    console.log(file);
  };
  $scope.removeInput = function(file) {
    $http.delete(createRemoveInputUrl($scope.experiment._id, file.name, file.version.id))
    .success(function(data){
      //console.log(data);
      processFiles($filter, $scope.experiment, data);
    })
    .error(function(data) {
      alert(data);
    });
  };
  
  $scope.addRemote = function(uploadType) {
    $scope.uploading = true;
    $scope.remote.uploadType = uploadType;
    console.log($scope.remote);
    $http.post($scope.urlUploadInput, $scope.remote)
    .success(function(data){
      console.log(data);
      processFiles($filter, $scope.experiment, data);
      $scope.uploading = false;
      $scope.modalAddInput = false;
      $scope.remote = {};
    });
  };
  
  $scope.openAddInput = function () {
    $scope.modalAddInput = true;
  };
  $scope.closeAddInput = function () {
    //$scope.closeMsg = 'I was closed at: ' + new Date();
    $scope.modalAddInput = false;
    $scope.files = null;
  };
  $scope.opts = {
    backdropFade: true,
    dialogFade:true
  };
  $scope.dialogOptsRun = {
    backdropFade: true,
    dialogFade:true,
    dialogClass: 'panelViewRun modal'
  };
  //console.log($('input[type="file"]'));
  $(document).on('change', 'input[type="file"]', function() {
    $scope.files = $('input[type="file"]').prop('files');
    if (!$scope.files) $scope.files = [$('input[type="file"]').val()];
    $scope.$apply();
  });
  $scope.isFileSelected = function() {
    return !$('input[type="file"]').val();
  };  
  $scope.results = function(content, completed) {
    //console.log('content:'+content);
    //console.log('completed:'+completed);
    if (completed && content.length > 0) {
      var files = JSON.parse(content);
      //console.log(files); // process content
      processFiles($filter, $scope.experiment, files);
      $scope.uploading = false;
      $scope.modalAddInput = false;
    } else {
      //console.log('Uploading..');
      $scope.uploading = true;
      // 1. ignore content and adjust your model to show/hide UI snippets; or
      // 2. show content as an _operation progress_ information
    }
  };
  $scope.uploadType='localUpload';
  
  console.log('create run');
  $scope.run = function() {
    $scope.newRun.name = $scope.newRun.name || $scope.newRun.defName;
    $scope.isRunWaiting = true;
    $scope.experiment.files.forEach(function(file) {
      if (file.selected) $scope.newRun.infiles[file.name] = file.version.id;
    });
    $http.post($scope.urlAddRun, $scope.newRun)
    .success(function(run){
      $scope.experiment.runs.push(run);
      $scope.newRun = createNewRun($scope.experiment);
      $scope.isRunWaiting = false;
    });
  };
  $scope.removeRun = function(runIndex){
    var run = $scope.experiment.runs[runIndex];
    var url = $scope.urlAddRun+'/'+run._id;
    $http.delete(url)
    .success(function(){
      $scope.experiment.runs.splice(runIndex, 1);
    });
  };
  $scope.openViewRun = function(run) {
    if (!run.urlOutputLis) run.outfiles.some(function(f){
      if (f.name.indexOf('lis', f.name.length - 3) >= 0) {
        run.urlOutputLis = '/exps.ui.plot/' + $scope.experiment._id + '/' + run._id + '/' + encodeURIComponent(f.name);
        return true;
      }
    });
    $scope.expRun = run;
    //console.log(run._id);
    $scope.modalViewRun = true;
    $scope.opts.dialogClass = 'panelViewRun';
  };  
  $scope.closeViewRun = function() {
    $scope.modalViewRun = false;
  };
  function updateRunStatus(run) {
    //console.log(run._id);
    //console.log($scope.experiment.runs);
    var updatedRun = findById($scope.experiment.runs, run._id);
    if (updatedRun) {
      //console.log('ok');
      updatedRun.status = run.status;
      updatedRun.outfiles = run.outfiles;
      updatedRun.errors = run.errors;
      $scope.$apply();
    }
  }
  $scope.destroy = function() {
    $scope.experiment.$delete(function() {
      //console.log(exp);
      $scope.experiments.splice(indexOfById($scope.experiments, $scope.experiment._id), 1);
      $state.transitionTo('experiments.list');
    });
  };
}

function expEditController($scope, $state, $stateParams, Workflow, Experiment) {
  var self = this;
  $scope.experiment = Experiment.get({id:$stateParams.expId}, function(){
    $scope.experiment.workflow = $scope.experiment.workflow._id;
  });
  $scope.workflows = Workflow.query();
  $scope.expMetaForm = {};
  $scope.save = function() {
    Experiment.update($scope.experiment, function(exp) {
      //console.log(exp);
      exp.workflow = findById($scope.workflows, exp.workflow);
      var oldexp = findById($scope.experiments, exp._id);
      angular.extend(oldexp, exp);
      $state.transitionTo('experiments.show', { expId:exp._id});
    });
  };
}

function expNewController($scope, $state, Workflow, Experiment) {
  var self = this;
  $scope.workflows = Workflow.query();
  $scope.expMetaForm = {};
  $scope.save = function() {
    //console.log($scope.experiment);
    //console.log($scope.expMetaForm);
    Experiment.save($scope.experiment, function(exp) {
      //console.log(exp);
      $scope.experiments.push(exp);
      $state.transitionTo('experiments.show', { expId:exp._id});
    });
  };
  $scope.isClean = function() {
    return angular.equals(self.original, $scope.expMetaForm);
  };
  $scope.cancelLink = 'back';
}


angular.module('expServices', ['ngResource'])
  .factory('Experiment', ['$resource', function($resource){
    return $resource(urlShow, {id:'@_id'}, {
      update: { method:'PUT' }
    });
  }])
  .factory('Workflow', ['$resource', function($resource){
    //console.log('urlWorkflowShow: %s', urlWorkflowShow);
    return $resource(urlWorkflowShow, {}, {});
  }])
  .factory('websocket', function($rootScope){
    var url = window.location.protocol + '//' + window.location.host + '/websocket';
    var sock = new SockJS(url);
    var listeners = {};
    var isOpen = false;
    sock.onopen = function() {
      for (var id in listeners) {
        var data = {type:'register', id:id};
        sock.send(JSON.stringify(data));
      }
      isOpen = true;
    };
    sock.onclose = function() {
      isOpen = false;
    };
    sock.onmessage = function(e) {
      if (e.type === "message") {
        var data = JSON.parse(e.data);
        var list = listeners[data.id];
        if (data.type === 'message' && list && list.length > 0) {
          list.forEach(function(listener){
            listener(data.data);
          });
        }
      }
    };
    return {
      onMessage: function(id, listener) {
        //console.log(id);
        //console.log(isOpen);
        if (!(id in listeners)) listeners[id] = [listener];
        else listeners[id].push(listener);
        if (isOpen) sock.send(JSON.stringify({type:'register', id:id}));
      },
      sendMessage: function(id, message) {
        var data = {type:'message', id:id, data:message};
        sock.send(JSON.stringify(data));
      },
      clear: function() {
        listeners = {};
      }
    };
  })
;
angular.module('experiment', ['ui.bootstrap', 'ui.state', 'ngUpload', 'expServices'])
  .config(['$stateProvider', '$routeProvider', '$urlRouterProvider', '$locationProvider',
    function ($stateProvider, $routeProvider, $urlRouterProvider, $locationProvider) {
      $stateProvider
        .state('experiments', {
          abstract: true,
          url: '',
          templateUrl: 'experiments.html' ,
          controller: [ '$scope', '$state', 'Experiment', expController]
        })
        .state('experiments.list', {
          url: '',
          templateUrl: 'experiments.list.html'
        })
        .state('experiments.new', {
          url: '/new',
          templateUrl: 'experiments.form.html',
          controller: [ '$scope', '$state', 'Workflow', 'Experiment', expNewController]
        })
        .state('experiments.show', {
          url: '/{expId}',
          templateUrl: 'experiments.show.html',
          controller: [ '$scope', '$state', '$filter', '$http', '$stateParams', 'websocket', 'Experiment', expShowController]
        })
        .state('experiments.edit', {
          url: '/{expId}/edit',
          templateUrl: 'experiments.form.html',
          controller: [ '$scope', '$state', '$stateParams', 'Workflow', 'Experiment', expEditController]
        })
        ;
    }
  ])
  .run(['$rootScope', '$state', '$stateParams',
      function ($rootScope, $state, $stateParams) {
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
      }
  ]);
</script>
